{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Codebraid Preview Preview Markdown documents in VS Code or VSCodium with full support for all Pandoc extensions to Markdown syntax. Jump between Markdown source and the preview with full bidirectional scroll sync. Execute code blocks and inline code via Codebraid using Jupyter kernels or Codebraid\u2019s built-in execution system. Export to PDF, Microsoft Word, and other formats with Pandoc. Pandoc demo The animation below demonstrates Markdown features. All Pandoc extensions to Markdown syntax are fully supported, because the preview is generated with Pandoc itself! This includes features like math, definition lists, tables, strikethrough, subscripts, superscripts, and footnotes. Full bidirectional scroll sync is provided for all Markdown variants based on CommonMark. Code execution demo Optional code execution is provided by Codebraid . The animation below shows a code block being executed in notebook mode using a Jupyter kernel. Executing a code block is simply a matter of adding a Codebraid attribute to the code block and then running Codebraid. In this case, the code block has the Pandoc attributes {.python .cb-nb} . .python specifies the language, and .cb-nb specifies code execution using Codebraid\u2019s notebook ( nb ) mode. The YAML metadata at the beginning of the document sets jupyter: true to specify that Jupyter kernels are used for code execution instead of Codebraid\u2019s built-in execution system. More information For installation information and details about features, explore the menu or follow the \u201cNext\u201d button at the bottom of the page. External links Paper in SciPy 2022 proceedings Pandoc website and GitHub Codebraid Preview on the Visual Studio Marketplace , Open VSX Registry , and GitHub Codebraid on PyPI and GitHub","title":"Overview"},{"location":"#codebraid-preview","text":"Preview Markdown documents in VS Code or VSCodium with full support for all Pandoc extensions to Markdown syntax. Jump between Markdown source and the preview with full bidirectional scroll sync. Execute code blocks and inline code via Codebraid using Jupyter kernels or Codebraid\u2019s built-in execution system. Export to PDF, Microsoft Word, and other formats with Pandoc.","title":"Codebraid Preview"},{"location":"#pandoc-demo","text":"The animation below demonstrates Markdown features. All Pandoc extensions to Markdown syntax are fully supported, because the preview is generated with Pandoc itself! This includes features like math, definition lists, tables, strikethrough, subscripts, superscripts, and footnotes. Full bidirectional scroll sync is provided for all Markdown variants based on CommonMark.","title":"Pandoc demo"},{"location":"#code-execution-demo","text":"Optional code execution is provided by Codebraid . The animation below shows a code block being executed in notebook mode using a Jupyter kernel. Executing a code block is simply a matter of adding a Codebraid attribute to the code block and then running Codebraid. In this case, the code block has the Pandoc attributes {.python .cb-nb} . .python specifies the language, and .cb-nb specifies code execution using Codebraid\u2019s notebook ( nb ) mode. The YAML metadata at the beginning of the document sets jupyter: true to specify that Jupyter kernels are used for code execution instead of Codebraid\u2019s built-in execution system.","title":"Code execution demo"},{"location":"#more-information","text":"For installation information and details about features, explore the menu or follow the \u201cNext\u201d button at the bottom of the page.","title":"More information"},{"location":"#external-links","text":"Paper in SciPy 2022 proceedings Pandoc website and GitHub Codebraid Preview on the Visual Studio Marketplace , Open VSX Registry , and GitHub Codebraid on PyPI and GitHub","title":"External links"},{"location":"code/","text":"Code execution Code blocks and inline code can be executed with Codebraid , using Jupyter kernels or its built-in code execution system. When Jupyter kernels are used, you can get the same output you would see in a Jupyter notebook. Or you can easily customize what is displayed. The built-in code execution system is convenient when you want to run code exactly as if it were saved to a file and executed as a subprocess. The built-in system is based on templates and can easily be extended to support additional languages. For example, Rust support involves less than 50 lines total of templates and configuration. To run code, install Codebraid. Add a Codebraid attribute like .cb-run or .cb-nb to the code blocks or inline code you want to run. Then click the \u201cCodebraid\u201d button in the status bar (bottom right). When code has not yet been executed, it is represented by a placeholder box in the preview. Modified code When executed code is modified, its output is marked as stale in the preview. If it has no output, then a placeholder is inserted instead. All later code that is executed in the same session is marked as stale as well, since its output may be affected by the modified code chunk. Non-blocking execution Code execution does not block the preview from updating. Code execution is decoupled from the preview process, so the preview always remains live! Keep writing while your code runs! Custom display Codebraid provides a number of options for customizing the display of code output. The keyword show can be used to specify exactly what is displayed, while hide can be used to remove specific elements that are currently shown.","title":"Code execution"},{"location":"code/#code-execution","text":"Code blocks and inline code can be executed with Codebraid , using Jupyter kernels or its built-in code execution system. When Jupyter kernels are used, you can get the same output you would see in a Jupyter notebook. Or you can easily customize what is displayed. The built-in code execution system is convenient when you want to run code exactly as if it were saved to a file and executed as a subprocess. The built-in system is based on templates and can easily be extended to support additional languages. For example, Rust support involves less than 50 lines total of templates and configuration. To run code, install Codebraid. Add a Codebraid attribute like .cb-run or .cb-nb to the code blocks or inline code you want to run. Then click the \u201cCodebraid\u201d button in the status bar (bottom right). When code has not yet been executed, it is represented by a placeholder box in the preview.","title":"Code execution"},{"location":"code/#modified-code","text":"When executed code is modified, its output is marked as stale in the preview. If it has no output, then a placeholder is inserted instead. All later code that is executed in the same session is marked as stale as well, since its output may be affected by the modified code chunk.","title":"Modified code"},{"location":"code/#non-blocking-execution","text":"Code execution does not block the preview from updating. Code execution is decoupled from the preview process, so the preview always remains live! Keep writing while your code runs!","title":"Non-blocking execution"},{"location":"code/#custom-display","text":"Codebraid provides a number of options for customizing the display of code output. The keyword show can be used to specify exactly what is displayed, while hide can be used to remove specific elements that are currently shown.","title":"Custom display"},{"location":"installation/","text":"Installation Install VS Code (or VSCodium ). Install Pandoc. Download the latest version from GitHub , or see the Pandoc website for additional options and details for specific operating systems. Make sure that Pandoc is on your PATH. Install Codebraid Preview. Open the Extensions manager (boxes icon in menu on left), then search for \u201ccodebraid\u201d. You can also install via the Visual Studio Marketplace or Open VSX Registry , or download the .vsix file from GitHub for manual installation. Install Codebraid (optional, for code execution). Available from PyPI and conda-forge , or directly from GitHub . If you plan to use Jupyter kernels, you will also need jupyter_client and language kernels such as ipykernel . Some or all of these may already be installed if you are using a full Anaconda installation. You may need to configure VS Code to work with Codebraid by specifying a Python interpreter. Use the Python: Select Interpreter command from the Command Palette ( Ctrl+Shift+P ) to select the Python interpreter where Codebraid is installed. See the VS Code documentation for additional Python configuration details. Starting the preview Once the extension is installed, open a Markdown file ( .md extension). Click on the \u201cCodebraid Preview\u201d button in the status bar (bottom right). Or run the Open Codebraid Preview command from the Command Palette ( Ctrl+Shift+P , then type command).","title":"Installation"},{"location":"installation/#installation","text":"Install VS Code (or VSCodium ). Install Pandoc. Download the latest version from GitHub , or see the Pandoc website for additional options and details for specific operating systems. Make sure that Pandoc is on your PATH. Install Codebraid Preview. Open the Extensions manager (boxes icon in menu on left), then search for \u201ccodebraid\u201d. You can also install via the Visual Studio Marketplace or Open VSX Registry , or download the .vsix file from GitHub for manual installation. Install Codebraid (optional, for code execution). Available from PyPI and conda-forge , or directly from GitHub . If you plan to use Jupyter kernels, you will also need jupyter_client and language kernels such as ipykernel . Some or all of these may already be installed if you are using a full Anaconda installation. You may need to configure VS Code to work with Codebraid by specifying a Python interpreter. Use the Python: Select Interpreter command from the Command Palette ( Ctrl+Shift+P ) to select the Python interpreter where Codebraid is installed. See the VS Code documentation for additional Python configuration details.","title":"Installation"},{"location":"installation/#starting-the-preview","text":"Once the extension is installed, open a Markdown file ( .md extension). Click on the \u201cCodebraid Preview\u201d button in the status bar (bottom right). Or run the Open Codebraid Preview command from the Command Palette ( Ctrl+Shift+P , then type command).","title":"Starting the preview"},{"location":"math/","text":"Math The preview includes math support with KaTeX , which is a JavaScript library for rendering LaTeX math in the browser. Inline math uses single $ delimiters while block math uses double $$ delimiters. For best previewing results, you may want to type the starting and ending delimiters first, and then enter the math between them. That way, you will get a live preview of the math as it is assembled.","title":"Math"},{"location":"math/#math","text":"The preview includes math support with KaTeX , which is a JavaScript library for rendering LaTeX math in the browser. Inline math uses single $ delimiters while block math uses double $$ delimiters. For best previewing results, you may want to type the starting and ending delimiters first, and then enter the math between them. That way, you will get a live preview of the math as it is assembled.","title":"Math"},{"location":"scroll-sync/","text":"Scroll sync Codebraid Preview provides full bidirectional scroll sync between the Markdown source and the preview for Markdown variants based on CommonMark, including the Pandoc formats commonmark , commonmark_x (CommonMark plus Pandoc extensions), and gfm (GitHub-flavored Markdown). By default, Codebraid Preview treats documents as commonmark_x , since it provides the most features . Scroll sync is bidirectional by default, but the direction can be toggled or it can be disabled with the \u201cScroll\u201d button in the status bar (bottom right). Codebraid Preview still works with Markdown variants that are not based on CommonMark, but scroll sync is disabled. To change the Markdown variant globally, modify the extension setting codebraid.preview.pandoc.fromFormat . To change the Markdown variant for a single file or all files in a directory (folder), create a Pandoc defaults file _codebraid_preview.yaml in the directory, and add an entry from: <markdown_variant_name> . Multi-file documents Pandoc can be given a list of files to combine into a single output document. Codebraid Preview provides scroll sync for multi-file documents. Simply create a Pandoc defaults file _codebraid_preview.yaml in the same directory as the document files, and list the files under the key input-files . The animation below shows a document that is broken into two files, with the following defaults file: input-files: - jupyter_1.md - jupyter_2.md Technical summary Pandoc 2.11.3 was released in December 2020. It added a sourcepos extension for CommonMark-based formats. This attaches source location information to elements in the abstract syntax tree (AST) generated by Pandoc. Codebraid Preview uses that data to construct a mapping between the Markdown input and the HTML output that is displayed in the preview. For more details, see the paper in the SciPy 2022 proceedings .","title":"Scroll sync"},{"location":"scroll-sync/#scroll-sync","text":"Codebraid Preview provides full bidirectional scroll sync between the Markdown source and the preview for Markdown variants based on CommonMark, including the Pandoc formats commonmark , commonmark_x (CommonMark plus Pandoc extensions), and gfm (GitHub-flavored Markdown). By default, Codebraid Preview treats documents as commonmark_x , since it provides the most features . Scroll sync is bidirectional by default, but the direction can be toggled or it can be disabled with the \u201cScroll\u201d button in the status bar (bottom right). Codebraid Preview still works with Markdown variants that are not based on CommonMark, but scroll sync is disabled. To change the Markdown variant globally, modify the extension setting codebraid.preview.pandoc.fromFormat . To change the Markdown variant for a single file or all files in a directory (folder), create a Pandoc defaults file _codebraid_preview.yaml in the directory, and add an entry from: <markdown_variant_name> .","title":"Scroll sync"},{"location":"scroll-sync/#multi-file-documents","text":"Pandoc can be given a list of files to combine into a single output document. Codebraid Preview provides scroll sync for multi-file documents. Simply create a Pandoc defaults file _codebraid_preview.yaml in the same directory as the document files, and list the files under the key input-files . The animation below shows a document that is broken into two files, with the following defaults file: input-files: - jupyter_1.md - jupyter_2.md","title":"Multi-file documents"},{"location":"scroll-sync/#technical-summary","text":"Pandoc 2.11.3 was released in December 2020. It added a sourcepos extension for CommonMark-based formats. This attaches source location information to elements in the abstract syntax tree (AST) generated by Pandoc. Codebraid Preview uses that data to construct a mapping between the Markdown input and the HTML output that is displayed in the preview. For more details, see the paper in the SciPy 2022 proceedings .","title":"Technical summary"}]}